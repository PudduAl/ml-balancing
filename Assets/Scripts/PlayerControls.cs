//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Selection"",
            ""id"": ""3fe1aaac-8d16-4d52-a142-a72e95ea7fd7"",
            ""actions"": [
                {
                    ""name"": ""Select Above Tile"",
                    ""type"": ""Button"",
                    ""id"": ""1893d100-5171-4e63-b5a5-a454ee7a41d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Below Tile"",
                    ""type"": ""Button"",
                    ""id"": ""17296216-577b-486b-acb6-cf76080cef10"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Left Tile"",
                    ""type"": ""Button"",
                    ""id"": ""c823d076-a2d3-4738-b1f2-eb297b5626e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select Right Tile"",
                    ""type"": ""Button"",
                    ""id"": ""6a1cb7e9-5a03-4813-903d-f73da1d2312a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Confirm Turn"",
                    ""type"": ""Button"",
                    ""id"": ""f1255886-838c-4038-8d29-ab73c42c3a72"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Cancel"",
                    ""type"": ""Button"",
                    ""id"": ""f669ebed-d145-400a-a817-215c9b4e9f0b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""65874d64-b01a-4d5a-82d2-8f3a0b21081c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Select Above Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7391d2df-ab0d-4f7b-ac0e-11686f448878"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Select Above Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f8ee56e7-6987-4fbc-b6dd-d5e234599f78"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Select Below Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf3ac94b-80de-4c2a-9b35-400cb0123f99"",
                    ""path"": ""<Keyboard>/numpad2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Select Below Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a99bf723-5f94-4c7b-8f29-e0af4ce16484"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Select Left Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c5b516-d61a-49e0-88bd-f9e7586b33f0"",
                    ""path"": ""<Keyboard>/numpad4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Select Left Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""059ab8aa-a14f-4fc6-93e3-0647fd058b9f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Select Right Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cff5cfd2-6c2f-4f32-8c51-358f282c725a"",
                    ""path"": ""<Keyboard>/numpad6"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Select Right Tile"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4981836-ae82-4303-b50b-fcea005cf2c3"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Confirm Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a95bf642-18e5-4470-a680-ce8a2485cc75"",
                    ""path"": ""<Keyboard>/numpad7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Confirm Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c65f4fd9-7770-4c0a-871c-8762cb698c04"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player1"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c0b8c98-4f82-4d9e-acc2-320c16745edc"",
                    ""path"": ""<Keyboard>/numpad9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Player2"",
                    ""action"": ""Cancel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player1"",
            ""bindingGroup"": ""Player1"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Player2"",
            ""bindingGroup"": ""Player2"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Selection
        m_Selection = asset.FindActionMap("Selection", throwIfNotFound: true);
        m_Selection_SelectAboveTile = m_Selection.FindAction("Select Above Tile", throwIfNotFound: true);
        m_Selection_SelectBelowTile = m_Selection.FindAction("Select Below Tile", throwIfNotFound: true);
        m_Selection_SelectLeftTile = m_Selection.FindAction("Select Left Tile", throwIfNotFound: true);
        m_Selection_SelectRightTile = m_Selection.FindAction("Select Right Tile", throwIfNotFound: true);
        m_Selection_ConfirmTurn = m_Selection.FindAction("Confirm Turn", throwIfNotFound: true);
        m_Selection_Cancel = m_Selection.FindAction("Cancel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Selection
    private readonly InputActionMap m_Selection;
    private List<ISelectionActions> m_SelectionActionsCallbackInterfaces = new List<ISelectionActions>();
    private readonly InputAction m_Selection_SelectAboveTile;
    private readonly InputAction m_Selection_SelectBelowTile;
    private readonly InputAction m_Selection_SelectLeftTile;
    private readonly InputAction m_Selection_SelectRightTile;
    private readonly InputAction m_Selection_ConfirmTurn;
    private readonly InputAction m_Selection_Cancel;
    public struct SelectionActions
    {
        private @PlayerControls m_Wrapper;
        public SelectionActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectAboveTile => m_Wrapper.m_Selection_SelectAboveTile;
        public InputAction @SelectBelowTile => m_Wrapper.m_Selection_SelectBelowTile;
        public InputAction @SelectLeftTile => m_Wrapper.m_Selection_SelectLeftTile;
        public InputAction @SelectRightTile => m_Wrapper.m_Selection_SelectRightTile;
        public InputAction @ConfirmTurn => m_Wrapper.m_Selection_ConfirmTurn;
        public InputAction @Cancel => m_Wrapper.m_Selection_Cancel;
        public InputActionMap Get() { return m_Wrapper.m_Selection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectionActions set) { return set.Get(); }
        public void AddCallbacks(ISelectionActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectionActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectionActionsCallbackInterfaces.Add(instance);
            @SelectAboveTile.started += instance.OnSelectAboveTile;
            @SelectAboveTile.performed += instance.OnSelectAboveTile;
            @SelectAboveTile.canceled += instance.OnSelectAboveTile;
            @SelectBelowTile.started += instance.OnSelectBelowTile;
            @SelectBelowTile.performed += instance.OnSelectBelowTile;
            @SelectBelowTile.canceled += instance.OnSelectBelowTile;
            @SelectLeftTile.started += instance.OnSelectLeftTile;
            @SelectLeftTile.performed += instance.OnSelectLeftTile;
            @SelectLeftTile.canceled += instance.OnSelectLeftTile;
            @SelectRightTile.started += instance.OnSelectRightTile;
            @SelectRightTile.performed += instance.OnSelectRightTile;
            @SelectRightTile.canceled += instance.OnSelectRightTile;
            @ConfirmTurn.started += instance.OnConfirmTurn;
            @ConfirmTurn.performed += instance.OnConfirmTurn;
            @ConfirmTurn.canceled += instance.OnConfirmTurn;
            @Cancel.started += instance.OnCancel;
            @Cancel.performed += instance.OnCancel;
            @Cancel.canceled += instance.OnCancel;
        }

        private void UnregisterCallbacks(ISelectionActions instance)
        {
            @SelectAboveTile.started -= instance.OnSelectAboveTile;
            @SelectAboveTile.performed -= instance.OnSelectAboveTile;
            @SelectAboveTile.canceled -= instance.OnSelectAboveTile;
            @SelectBelowTile.started -= instance.OnSelectBelowTile;
            @SelectBelowTile.performed -= instance.OnSelectBelowTile;
            @SelectBelowTile.canceled -= instance.OnSelectBelowTile;
            @SelectLeftTile.started -= instance.OnSelectLeftTile;
            @SelectLeftTile.performed -= instance.OnSelectLeftTile;
            @SelectLeftTile.canceled -= instance.OnSelectLeftTile;
            @SelectRightTile.started -= instance.OnSelectRightTile;
            @SelectRightTile.performed -= instance.OnSelectRightTile;
            @SelectRightTile.canceled -= instance.OnSelectRightTile;
            @ConfirmTurn.started -= instance.OnConfirmTurn;
            @ConfirmTurn.performed -= instance.OnConfirmTurn;
            @ConfirmTurn.canceled -= instance.OnConfirmTurn;
            @Cancel.started -= instance.OnCancel;
            @Cancel.performed -= instance.OnCancel;
            @Cancel.canceled -= instance.OnCancel;
        }

        public void RemoveCallbacks(ISelectionActions instance)
        {
            if (m_Wrapper.m_SelectionActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectionActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectionActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectionActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectionActions @Selection => new SelectionActions(this);
    private int m_Player1SchemeIndex = -1;
    public InputControlScheme Player1Scheme
    {
        get
        {
            if (m_Player1SchemeIndex == -1) m_Player1SchemeIndex = asset.FindControlSchemeIndex("Player1");
            return asset.controlSchemes[m_Player1SchemeIndex];
        }
    }
    private int m_Player2SchemeIndex = -1;
    public InputControlScheme Player2Scheme
    {
        get
        {
            if (m_Player2SchemeIndex == -1) m_Player2SchemeIndex = asset.FindControlSchemeIndex("Player2");
            return asset.controlSchemes[m_Player2SchemeIndex];
        }
    }
    public interface ISelectionActions
    {
        void OnSelectAboveTile(InputAction.CallbackContext context);
        void OnSelectBelowTile(InputAction.CallbackContext context);
        void OnSelectLeftTile(InputAction.CallbackContext context);
        void OnSelectRightTile(InputAction.CallbackContext context);
        void OnConfirmTurn(InputAction.CallbackContext context);
        void OnCancel(InputAction.CallbackContext context);
    }
}
